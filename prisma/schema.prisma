// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  profileImage    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  deletedAt       DateTime?         @updatedAt

  issuesCreated   Issue[]           @relation("created")
  issuesAssigned  Issue[]           @relation("assigned")
  UserProjectRole UserProjectRole[]
}

model PendingUser {
  id               String              @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  email            String
  projectId        String              @db.Uuid
  status           AuthorizationStatus
  statusUpdatedAt  DateTime

  project          Project             @relation(name: "pendingUsers", fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum AuthorizationStatus {
  ACCEPTED
  PENDING
}

model Role {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  name              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  deletedAt         DateTime?         @updatedAt

  userProjectRole   UserProjectRole[]
}

model Issue {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  name              String
  title             String
  description       String
  projectId         String    @db.Uuid
  priority          Priority
  storyPoints       Int
  issueTypeId       String    @db.Uuid
  authorId          String    @db.Uuid
  assigneeId        String?   @db.Uuid
  stageId           String    @db.Uuid
  timeTrackingId    String    @db.Uuid
  outOfEstimation   Boolean
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  deletedAt         DateTime? @updatedAt

  project           Project             @relation(name: "issues", fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  issueType         IssueType           @relation(fields: [issueTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  author            User                @relation(name: "created", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignee          User?               @relation(name: "assigned", fields: [assigneeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stage             Stage               @relation(fields: [stageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timeTracking      TimeTracking?       @relation(fields: [timeTrackingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  IssueCustomFields IssueCustomFields[]
}

model IssueType {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  name  String

  Issue Issue[]
}

model IssueCustomFields {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  name    String
  value   String
  issueId String @db.Uuid

  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Stage {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  name  String

  Issue Issue[]
}

model Project {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  name            String
  url             String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  deletedAt       DateTime? @updatedAt

  issues          Issue[]             @relation("issues")
  userProjectRole UserProjectRole[]
  pendingUsers    PendingUser[]   @relation("pendingUsers")
}

model LogWebhooks {
  id          String               @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  statusId    String               @db.Uuid
  sourceId    String               @db.Uuid
  payload     Json
  createdAt   DateTime             @default(now())

  status      WebhookOutcomeStatus @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  source      WebhookSource        @relation(fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model WebhookOutcomeStatus {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  name          String

  LogWebhooks   LogWebhooks[]
}

model WebhookSource {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  name          String

  LogWebhooks   LogWebhooks[]
}

model TimeTracking {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  startTime   Int
  endTime     Int

  Issue       Issue[]
}

model UserProjectRole {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
  userId      String    @db.Uuid
  projectId   String    @db.Uuid
  roleId      String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime? @updatedAt

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role        Role    @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Priority {
  noPriority
  lowPriority
  mediumPriority
  highPriority
  urgent
}

// model Event {
//   id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("id") // Primary Key 
//   issue            Issue         @relation(fields: [issueId], references: [id])
//   triggerUser      User          @relation(fields: [triggerUserId], references: [id])
//   eventType        EventType     @relation(fields: [eventTypeId], references: [id])
//   payload          Json
//   createdAt        DateTime      @default(now()) 
//   updatedAt        DateTime?      @updatedAt
//   deletedAt        DateTime?      @updatedAt
// }

// model EventType {
//   id          String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // Primary Key 
//   name        String    @unique
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime? @updatedAt
//   deletedAt   DateTime? @updatedAt
// }