// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cognitoId    String?   @unique @db.Uuid
  profileImage String?
  email        String
  name         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?

  projectsRoleAssigned             UserProjectRole[]           @relation("UserProjectRole_assigned")
  emittedUserProjectRole           UserProjectRole[]           @relation("UserProjectRole_emitter")
  emittedBlockerStatusModification BlockerStatusModification[]
  authoredIssues                   Issue[]                     @relation("created")
  asignedIssues                    Issue[]                     @relation("assigned")
  emittedIssueChangeLogs           IssueChangeLog[]
  emittedManualTimeModification    ManualTimeModification[]
  OrganizationAdministrator        OrganizationAdministrator[]
}

model Role {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String

  users UserProjectRole[]
}

model Issue {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  providerIssueId String    @unique
  authorId        String?   @db.Uuid
  assigneeId      String?   @db.Uuid
  projectId       String    @db.Uuid
  stageId         String?   @db.Uuid
  name            String
  title           String
  description     String?
  priority        Priority
  storyPoints     Int?
  createdAt       DateTime  @default(now())
  deletedAt       DateTime?

  project                    Project                     @relation(fields: [projectId], references: [id])
  author                     User?                       @relation(name: "created", fields: [authorId], references: [id])
  assignee                   User?                       @relation(name: "assigned", fields: [assigneeId], references: [id])
  labels                     IssueLabel[]
  stage                      Stage?                      @relation(fields: [stageId], references: [id])
  timeTrackings              TimeTracking[]
  issueChangeLogs            IssueChangeLog[]
  customFields               IssueCustomFields[]
  blockerStatusModifications BlockerStatusModification[]
  manualTimeModifications    ManualTimeModification[]
}

model IssueLabel {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  labelId String @db.Uuid
  issueId String @db.Uuid

  label Label @relation(fields: [labelId], references: [id])
  issue Issue @relation(fields: [issueId], references: [id])
}

model IssueCustomFields {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  issueId String @db.Uuid
  name    String
  value   String

  issue Issue @relation(fields: [issueId], references: [id])
}

model Stage {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String

  projectStages ProjectStage[]
  issues        Issue[]
}

model Project {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  providerId     String    @unique
  organizationId String    @db.Uuid
  image          String?
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?

  organization  Organization      @relation(fields: [organizationId], references: [id])
  usersRoles    UserProjectRole[]
  projectStages ProjectStage[]
  issues        Issue[]
  labels        ProjectLabel[]
}

model LogWebhooks {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  statusId        String   @db.Uuid
  sourceId        String   @db.Uuid
  providerEventId String   @unique
  payload         Json
  createdAt       DateTime @default(now())

  status WebhookOutcomeStatus @relation(fields: [statusId], references: [id])
  source WebhookSource        @relation(fields: [sourceId], references: [id])
}

model WebhookOutcomeStatus {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String

  logsWebhooks LogWebhooks[]
}

model WebhookSource {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String

  logsWebhooks LogWebhooks[]
}

model TimeTracking {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  issueId   String   @db.Uuid
  startTime DateTime
  endTime   DateTime

  issue Issue @relation(fields: [issueId], references: [id])
}

model UserProjectRole {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String    @db.Uuid
  projectId     String    @db.Uuid
  roleId        String    @db.Uuid
  userEmitterId String    @db.Uuid
  isAccepted    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  deletedAt     DateTime?

  project     Project @relation(fields: [projectId], references: [id])
  user        User    @relation(name: "UserProjectRole_assigned", fields: [userId], references: [id])
  userEmitter User    @relation(name: "UserProjectRole_emitter", fields: [userEmitterId], references: [id])
  role        Role    @relation(fields: [roleId], references: [id])
}

model Label {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String

  issues        IssueLabel[]
  projectLabels ProjectLabel[]
}

model BlockerStatusModification {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  providerEventId   String    @unique
  userEmitterId     String?   @db.Uuid
  issueId           String    @db.Uuid
  status            BlockType
  eventRegisteredAt DateTime?
  createdAt         DateTime  @default(now())
  reason            String
  comment           String

  issue       Issue @relation(fields: [issueId], references: [id])
  userEmitter User? @relation(fields: [userEmitterId], references: [id])
}

model ManualTimeModification {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userEmitterId    String   @db.Uuid
  issueId          String   @db.Uuid
  timeAmount       Int
  modificationDate DateTime
  reason           String

  issue       Issue @relation(fields: [issueId], references: [id])
  userEmitter User  @relation(fields: [userEmitterId], references: [id])
}

model IssueChangeLog {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  providerEventId   String    @unique
  userEmitterId     String?   @db.Uuid
  issueId           String    @db.Uuid
  field             String
  from              String?
  to                String?
  eventRegisteredAt DateTime?
  createdAt         DateTime  @default(now())

  userEmitter User? @relation(fields: [userEmitterId], references: [id])
  issue       Issue @relation(fields: [issueId], references: [id])
}

model ProjectStage {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String    @db.Uuid
  stageId   String    @db.Uuid
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  project Project @relation(fields: [projectId], references: [id])
  stage   Stage   @relation(fields: [stageId], references: [id])
}

model ProjectLabel {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String    @db.Uuid
  labelId   String    @db.Uuid
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  project Project @relation(fields: [projectId], references: [id])
  label   Label   @relation(fields: [labelId], references: [id])
}

enum BlockType {
  NO_STATUS
  BLOCKED_BY
  BLOCKING_TO
}

enum Priority {
  NO_PRIORITY
  LOW_PRIORITY
  MEDIUM_PRIORITY
  HIGH_PRIORITY
  URGENT
}

model Organization {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique

  projects        Project[]
  administrators  OrganizationAdministrator[]
  pendingProjects PendingProjectAuthorization[]
}

model OrganizationAdministrator {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String @db.Uuid
  userId         String @db.Uuid

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model PendingProjectAuthorization {
  id                String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  providerProjectId String
  token             String
  integratorId      String
  issueProviderId   String @db.Uuid
  organizationId    String @db.Uuid

  issueProvider IssueProvider @relation(fields: [issueProviderId], references: [id])
  organization  Organization  @relation(fields: [organizationId], references: [id])
  emails        MemberEmail[]
}

model IssueProvider {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                        String                        @unique
  PendingProjectAuthorization PendingProjectAuthorization[]
}

model MemberEmail {
  id                            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                         String
  pendingProjectAuthorizationId String @db.Uuid

  pendingProjectAuthorization PendingProjectAuthorization @relation(fields: [pendingProjectAuthorizationId], references: [id], onDelete: Cascade)

  @@unique([pendingProjectAuthorizationId, email])
}
